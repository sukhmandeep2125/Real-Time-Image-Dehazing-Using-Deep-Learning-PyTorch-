# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JIpNugq34oumi-p0Bc4LrzcQHb5G337u
"""

from google.colab import drive
drive.mount('/content/drive')

!ls

import torch
import torch.nn.functional as F
from torchvision import transforms
from PIL import Image
import matplotlib.pyplot as plt
import numpy as np
from skimage.metrics import peak_signal_noise_ratio as psnr_metric
from skimage.metrics import structural_similarity as ssim_metric

# Define the model architecture
class DeepDehazeNet(torch.nn.Module):
    def __init__(self):
        super(DeepDehazeNet, self).__init__()

        def conv_block(in_channels, out_channels):
            return torch.nn.Sequential(
                torch.nn.Conv2d(in_channels, out_channels, 3, padding=1),
                torch.nn.BatchNorm2d(out_channels),
                torch.nn.ReLU(inplace=True)
            )

        self.enc1 = conv_block(3, 64)
        self.enc2 = conv_block(64, 128)
        self.enc3 = conv_block(128, 256)

        self.pool = torch.nn.MaxPool2d(2, 2)
        self.bottleneck = conv_block(256, 512)

        self.up1 = torch.nn.ConvTranspose2d(512, 256, 2, stride=2)
        self.dec1 = conv_block(512, 256)

        self.up2 = torch.nn.ConvTranspose2d(256, 128, 2, stride=2)
        self.dec2 = conv_block(256, 128)

        self.up3 = torch.nn.ConvTranspose2d(128, 64, 2, stride=2)
        self.dec3 = conv_block(128, 64)

        self.final = torch.nn.Conv2d(64, 3, kernel_size=1)

    def forward(self, x):
        e1 = self.enc1(x)
        e2 = self.enc2(self.pool(e1))
        e3 = self.enc3(self.pool(e2))
        b = self.bottleneck(self.pool(e3))

        d1 = self.up1(b)
        d1 = self.dec1(torch.cat([d1, e3], dim=1))

        d2 = self.up2(d1)
        d2 = self.dec2(torch.cat([d2, e2], dim=1))

        d3 = self.up3(d2)
        d3 = self.dec3(torch.cat([d3, e1], dim=1))

        out = self.final(d3)
        return torch.sigmoid(out)

# Load model and weights
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
model = DeepDehazeNet().to(device)
model.load_state_dict(torch.load("/content/drive/MyDrive/best1.pth", map_location=device))
model.eval()

# Image transform
transform = transforms.Compose([
    transforms.ToTensor()
])

# Load test hazy image
hazy_image_path = '/content/sample_data/download (10).png'  # <-- change this path
hazy = Image.open(hazy_image_path).convert("RGB")
input_tensor = transform(hazy).unsqueeze(0).to(device)

# Inference
with torch.no_grad():
    output = model(input_tensor)

# Convert tensor to image
output_image = output.squeeze(0).cpu().permute(1, 2, 0).numpy()
output_image = np.clip(output_image, 0, 1)

# Display hazy and dehazed images
plt.figure(figsize=(12, 6))
plt.subplot(1, 2, 1)
plt.imshow(hazy)
plt.title("Hazy Input")
plt.axis("off")

plt.subplot(1, 2, 2)
plt.imshow(output_image)
plt.title("Dehazed Output")
plt.axis("off")

plt.tight_layout()
plt.show()